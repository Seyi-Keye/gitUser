{"version":3,"sources":["Avatar.jsx","Information.jsx","Card.jsx","SearchTool.jsx","UsernameContext.jsx","App.js","serviceWorker.js","index.js"],"names":["Avatar","props","picture","src","alt","Information","data","public_repos","name","location","login","followers","following","html_url","className","onClick","window","open","Card","useState","setData","error","setError","fetchEventPayload","username","a","fetch","response","json","result","id","avatar_url","newData","filter","x","useEffect","filterItem","reverse","map","key","message","checkError","SearchTool","onSubmit","event","preventDefault","handleSearch","target","githubUsername","value","type","placeholder","UsernameContext","React","createContext","App","setName","Provider","Boolean","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console"],"mappings":"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","file":"static/js/main.54b63b45.chunk.js","sourcesContent":["import React from 'react';\n\nfunction Avatar(props) {\n  const avatar_url = 'http://svgur.com/i/65U.svg';\n  let { picture } = props;\n  picture = picture || avatar_url;\n  return <img src={picture} alt=\"avatar\" />;\n}\nexport default Avatar;\n","import React from 'react';\n// import './App.scss';\n\nfunction Information(props) {\n  const { data } = props;\n  const {\n    public_repos,\n    name,\n    location,\n    login,\n    followers,\n    following,\n    html_url,\n  } = data;\n  return (\n    <div className=\"information\">\n      {/* <b>User Details</b> */}\n      <ul>\n        <li>\n          Name: <b>{name}</b>\n        </li>\n        <li>\n          Login: <em>{login}</em>\n        </li>\n        <li>Location: {location}</li>\n        <li>Public Repositories: {public_repos}</li>\n        <li>Followers: {followers}</li>\n        <li>Following: {following}</li>\n      </ul>\n      <button\n        onClick={() => {\n          window.open(html_url, '_blank');\n        }}\n      >\n        Repository\n      </button>\n    </div>\n  );\n}\nexport default Information;\n","import React, { useState, useEffect } from 'react';\nimport Avatar from './Avatar';\nimport Information from './Information';\nimport './card.scss';\n\nfunction Card(props) {\n  const [data, setData] = useState([]);\n  const [error, setError] = useState('');\n\n  const fetchEventPayload = async (username) => {\n    try {\n      const response = await fetch(`https://api.github.com/users/${username}`);\n      const result = await response.json();\n\n      const {\n        id,\n        avatar_url,\n        followers,\n        following,\n        location,\n        login,\n        name,\n        public_repos,\n        html_url,\n      } = result;\n\n      const newData = {\n        id,\n        avatar_url,\n        followers,\n        following,\n        location,\n        login,\n        name,\n        public_repos,\n        html_url,\n      };\n      return setData([...data.filter((x) => x.id !== id), newData]);\n    } catch (error) {\n      setError(error);\n    }\n  };\n\n  useEffect(() => {\n    if (props.username) {\n      fetchEventPayload(props.username);\n    }\n  }, [props.username]);\n\n  const filterItem = (id) => {\n    setData(data.filter((x) => x.id !== id));\n  };\n\n  const handleDisplay = (data) => {\n    return (\n      <div className=\"card\" key={data.id}>\n        <div className=\"card__header\">\n          <Avatar picture={data.avatar_url} />\n          <div className=\"card__close\">\n            <p\n              className=\"card__close--body\"\n              onClick={() => {\n                filterItem(data.id);\n              }}\n            >\n              x\n            </p>\n          </div>\n        </div>\n        <Information data={data} />\n      </div>\n    );\n  };\n\n  const checkError = (error) => {\n    return <p className=\"card__error\">{error.message}</p>;\n  };\n\n  return (\n    <div className=\"card-container\">\n      {data.reverse().map(handleDisplay)}\n      {error && checkError(error)}\n    </div>\n  );\n}\nexport default Card;\n","import React, { useContext } from 'react';\n// import Card from './Card';\n// import UsernameContext from './UsernameContext';\nimport './searchTool.scss';\n\nfunction SearchTool(props) {\n  // let usernameContext = useContext(UsernameContext);\n\n  const handleFormSubmit = (event) => {\n    event.preventDefault();\n    props.handleSearch(event.target.githubUsername.value);\n  };\n\n  return (\n    <div className=\"searchTool\">\n      <form onSubmit={handleFormSubmit}>\n        <input\n          type=\"text\"\n          placeholder=\"Enter Github Username\"\n          name=\"githubUsername\"\n        />\n        <button type=\"submit\">Search</button>\n      </form>\n      {/* <Card username={usernameContext} /> */}\n    </div>\n  );\n}\n\nexport default SearchTool;\n","import React from 'react';\n\nconst UsernameContext = React.createContext('');\nexport default UsernameContext;\n","import React, { useContext, useState } from 'react';\nimport Card from './Card';\nimport SearchTool from './SearchTool';\nimport UsernameContext from './UsernameContext';\nimport './App.scss';\n\nfunction App() {\n  const [name, setName] = useState('');\n  // let usernameContext = useContext(UsernameContext);\n\n  const handleSearch = (username) => {\n    setName(username);\n  };\n\n  return (\n    <UsernameContext.Provider value={name}>\n      <>\n        <header>GITUSER APP</header>\n        <div className=\"App\">\n          <SearchTool handleSearch={handleSearch} />\n        </div>\n        <Card username={name} />\n      </>\n    </UsernameContext.Provider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}